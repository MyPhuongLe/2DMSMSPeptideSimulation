#!/usr/bin/env python
# coding: utf-8

# In[1]:


import matplotlib as mpl
import matplotlib.pyplot as plt 
from matplotlib import cm
get_ipython().run_line_magic('matplotlib', 'inline')
get_ipython().run_line_magic('config', "InlineBackend.figure_format = 'retina'")

import pandas as pd

import scipy
from scipy import ndimage as ndi
from scipy import misc

import numpy as np
from numpy import *

from math import sqrt

from collections import Counter
from itertools import product, combinations
import copy

from pepfrag import MassType, ModSite, Peptide

from tqdm.notebook import trange, tqdm
from time import sleep

from Sequencing_functions import *


# # Import libraries
# ### Fragment library
# Import libraries generated from previous job.<br>
# A few filtering steps are employed to shortened the library and computing time:<br>
# - Remove mass of fragments generated by loss of H2O from the molecular ion <br>
# - Remove entries of molecular ions as they coincide in mass with y ion 

# In[2]:


lib_extra = pd.read_csv("FragmentLibrary_nomod_additional.csv")#,usecols = ["Mass","Type","Sequence"])
lib_extra.dropna(axis=0,inplace=True)
lib_extra.reset_index(drop=True,inplace=True)


# In[3]:


lib_extra1047 = pd.read_csv("Extra1047.csv")
lib_extra1047.dropna(axis=0,inplace=True)
lib_extra1047.reset_index(drop=True,inplace=True)


# In[4]:


lib1 = pd.concat([lib_extra,lib_extra1047],sort=False)
lib1.reset_index(inplace=True,drop=True)


# In[5]:


lib_og = pd.read_csv("FragmentLibrary.csv")#,usecols = ["Mass","Type","Sequence"])
lib_og.dropna(axis=0,inplace=True)
lib_og = lib_og[lib_og["Type"] != "[M-H2O][+]"]
lib_og = lib_og[lib_og["Type"] != "[M+H][+]"]
lib_og.reset_index(drop=True,inplace=True)


# In[6]:


lib = pd.concat([lib_og,lib1],sort=False)
lib.reset_index(inplace=True,drop=True)


# In[7]:


lib_shortened = lib[~lib['Type'].isin(['c', 'z'])]


# In[8]:


frag_lib = lib_shortened.copy()


# In[12]:


#List of expected modifications:
modifications = {"p": -80, "Ac": -42, "NH2": 1}


# In[13]:


masses = frag_lib.Mass.to_list()
masses = [mass for mass in masses if mass != 1047]


# In[14]:


plt.figure(figsize=(10, 5))
plt.hist(masses, bins=range(min(masses), max(masses) + 2,10), edgecolor='black', align='left')

plt.xlabel("m/z")
plt.ylabel("Number of structures")

# Show the plot
plt.xlim(0, 600)
plt.ylim(0, 20000)

plt.show()


# ### Neutral loss library

# In[15]:


nl_lib_new = pd.read_csv("NeutralLoss_Nov14.csv")#,usecols = ["Mass","Type","Sequence"])


# In[16]:


nl_small = {18:"H2O",17:"NH3 loss",35:"NH3+H2O",36:"H2O+H2O",44:"C2H4O",45:"CO+NH3",46:"CO+H2O"}


# In[17]:


nl_lib = nl_lib_new.copy()


# ### Examples
# #### Three peptide mixture

# In[19]:


d = {}
a = path_filter([136,216,301,456,585,749],749,d,frag_lib,nl_lib,nl_small,modifications)
a


# In[20]:


dd = {}
a = path_filter([136,193,221,376,505,669],669,dd,frag_lib,nl_lib,nl_small,modifications)
a


# In[23]:


ddd = {}
a = path_filter([193, 221, 278, 397,556],556,ddd,frag_lib,nl_lib,nl_small,modifications)
a


# #### Enkephalin Mix

# In[24]:


d = {}
a = path_filter([221, 278, 397, 425, 556],556,d,frag_lib,nl_lib,nl_small,modifications)


# In[25]:


dd = {}
aa = path_filter([120, 177, 205, 336, 556],556,dd,frag_lib,nl_lib,nl_small,modifications)


# In[26]:


sM = find_overlapping_components(a[556],aa[556])
a[556] = simplify_M(sM)
aa[556] = simplify_M(sM)


# In[27]:


top_down_filter(a,modifications)


# In[28]:


top_down_filter(aa,modifications)


# In[29]:


############


# In[30]:


d = {}
a = path_filter([136, 235, 292, 439, 570],570,d,frag_lib,nl_lib,nl_small,modifications)
a


# In[31]:


dd = {}
aa = path_filter([120, 177, 205, 336, 570],570,dd,frag_lib,nl_lib,nl_small,modifications)
aa


# In[32]:


sM = find_overlapping_components(a[570],aa[570])
a[570] = simplify_M(sM)
aa[570] = simplify_M(sM)


# In[33]:


top_down_filter(a,modifications)


# In[34]:


top_down_filter(aa,modifications)


# In[ ]:


############


# In[35]:


d = {}
a = path_filter([136, 221, 278, 397, 425,574],574,d,frag_lib,nl_lib,nl_small,modifications)
a


# In[36]:


dd = {}
aa = path_filter([177, 205, 354, 574],574,dd,frag_lib,nl_lib,nl_small,modifications)
aa


# In[37]:


sM = find_overlapping_components(a[574],aa[574])
a[574] = simplify_M(sM)
aa[574] = simplify_M(sM)


# In[38]:


top_down_filter(a,modifications)


# In[39]:


top_down_filter(aa,modifications)


# #### Additional

# In[40]:


## VYIHPF 


# In[41]:


d = {}
a = path_filter([136, 235, 263, 400, 513, 775],775,d,frag_lib,nl_lib,nl_small,modifications)


# In[42]:


dd = {}
aa = path_filter([110, 235, 400, 676, 775],775,dd,frag_lib,nl_lib,nl_small,modifications)


# In[43]:


ddd = {}
aaa = path_filter([110, 223, 485, 513, 775],775,ddd,frag_lib,nl_lib,nl_small,modifications)


# In[44]:


sM = find_overlapping_components(a[775],aa[775])
ssM = find_overlapping_components(sM,aaa[775])


# In[45]:


a[775] = simplify_M(ssM)
aa[775] = simplify_M(ssM)
aaa[775] = simplify_M(ssM)


# In[46]:


top_down_filter(a,modifications)


# In[47]:


top_down_filter(aa,modifications)


# In[48]:


top_down_filter(aaa,modifications)

